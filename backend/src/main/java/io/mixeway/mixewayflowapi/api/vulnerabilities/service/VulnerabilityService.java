package io.mixeway.mixewayflowapi.api.vulnerabilities.service;

import io.mixeway.mixewayflowapi.api.vulnerabilities.dto.EditVulnerabilityRequestDto;
import io.mixeway.mixewayflowapi.api.vulnerabilities.dto.GetVulnerabilitiesResponseDto;
import io.mixeway.mixewayflowapi.api.vulnerabilities.dto.VulnerabilityDto;
import io.mixeway.mixewayflowapi.db.entity.CodeRepo;
import io.mixeway.mixewayflowapi.db.entity.Finding;
import io.mixeway.mixewayflowapi.db.entity.Vulnerability;
import io.mixeway.mixewayflowapi.domain.coderepo.FindCodeRepoService;
import io.mixeway.mixewayflowapi.domain.finding.FindFindingService;
import io.mixeway.mixewayflowapi.domain.vulnerability.FindVulnerabilityService;
import io.mixeway.mixewayflowapi.domain.vulnerability.UpdateVulnerabilityService;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
@Log4j2
public class VulnerabilityService {
    private final FindVulnerabilityService findVulnerabilityService;
    private final FindFindingService findFindingService;
    private final FindCodeRepoService findCodeRepoService;
    private final UpdateVulnerabilityService updateVulnerabilityService;

    /**
     * Retrieves all vulnerabilities along with the repositories where they were detected.
     * The repositories included in the response are filtered based on the user's access rights.
     *
     * @param principal the security principal representing the currently authenticated user
     * @return a list of GetVulnerabilitiesResponseDto, each containing a vulnerability and the list of affected repository URLs
     */
    public List<GetVulnerabilitiesResponseDto> getAllVulnerabilitiesWithAffectedRepos(Principal principal) {
        List<Vulnerability> vulnerabilities = findVulnerabilityService.getAll();

        List<CodeRepo> accessibleRepos = findCodeRepoService.findCodeRepoForUser(principal);

        return vulnerabilities.stream()
                .map(vulnerability -> mapToDto(vulnerability, accessibleRepos))
                .toList();
    }

    /**
     * Maps a Vulnerability entity to a GetVulnerabilitiesResponseDto.
     * The method filters the repositories where the vulnerability was detected to include only those
     * that the user has access to.
     *
     * @param vulnerability the vulnerability entity to map
     * @param accessibleRepos the list of repositories the user has access to
     * @return a GetVulnerabilitiesResponseDto containing the vulnerability and the list of affected repository URLs
     */
    private GetVulnerabilitiesResponseDto mapToDto(Vulnerability vulnerability, List<CodeRepo> accessibleRepos) {
        List<Finding> findings = findFindingService.findByVulnerability(vulnerability);

        List<String> affectedRepositories = findings.stream()
                .map(Finding::getCodeRepo)
                .filter(accessibleRepos::contains)
                .map(CodeRepo::getRepourl)
                .distinct()
                .toList();

        return new GetVulnerabilitiesResponseDto(vulnerability, affectedRepositories);
    }

    /**
     * Updates the details of an existing vulnerability based on the provided {@link EditVulnerabilityRequestDto}.
     *
     * This method delegates the update operation to the {@link UpdateVulnerabilityService#patch} method,
     * which applies the changes to the specified vulnerability.
     *
     * @param editVulnerabilityRequestDto The DTO containing the updated vulnerability details, including
     *                                    the ID of the vulnerability to update, the new description,
     *                                    reference URL, and recommendation.
     */
    public void updateVuln(EditVulnerabilityRequestDto editVulnerabilityRequestDto) {
        updateVulnerabilityService.patch(
                editVulnerabilityRequestDto.getId(),
                editVulnerabilityRequestDto.getDescription(),
                editVulnerabilityRequestDto.getRef(),
                editVulnerabilityRequestDto.getRecommendation()
        );
    }

    public List<VulnerabilityDto> getsimplerVulnList(Principal principal) {
        return new ArrayList<>();
    }
}
