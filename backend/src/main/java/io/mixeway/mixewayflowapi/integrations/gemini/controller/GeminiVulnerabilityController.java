package io.mixeway.mixewayflowapi.integrations.gemini.controller;


import io.mixeway.mixewayflowapi.api.constraint.dto.ConstraintDto;
import io.mixeway.mixewayflowapi.api.constraint.service.ConstraintService;
import io.mixeway.mixewayflowapi.integrations.gemini.service.GeminiVulnerabilityService;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@Validated
@RequiredArgsConstructor
@Log4j2
public class GeminiVulnerabilityController {

    private final GeminiVulnerabilityService geminiVulnerabilityService;

    //@PreAuthorize("hasAuthority('ADMIN')")
    @GetMapping(value = "/api/v1/gemini/vulnerability")
    public ResponseEntity<List<String>> getConstraints() {
        try {
            return new ResponseEntity<>(geminiVulnerabilityService.analyzeVulnerability("Missing User Instruction. A user should be specified in the dockerfile, otherwise the image will run as root"), HttpStatus.OK);
        } catch (Exception e) {
            log.error("Failed to retrieve constraints", e);
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }
}
