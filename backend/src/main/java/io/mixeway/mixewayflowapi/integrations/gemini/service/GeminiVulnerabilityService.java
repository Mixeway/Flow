package io.mixeway.mixewayflowapi.integrations.gemini.service;

import com.google.genai.Client;
import com.google.genai.types.*;
import io.mixeway.mixewayflowapi.db.entity.Settings;
import io.mixeway.mixewayflowapi.domain.settings.FindSettingsService;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static java.lang.Thread.sleep;

@Service
@Log4j2
@RequiredArgsConstructor
public class GeminiVulnerabilityService {

    private final FindSettingsService findSettingsService;

    // Cached at boot so we don't recreate or re-log repeatedly
    private volatile Client genaiClient;
    private volatile boolean geminiEnabled;

    @PostConstruct
    void init() {
        Settings applicationSettings = findSettingsService.get();
        String apiKey = applicationSettings != null ? applicationSettings.getGeminiApiKey() : null;

        if (apiKey == null || apiKey.isBlank()) {
            geminiEnabled = false;
            log.warn("Gemini API key is NOT configured. Gemini-based vulnerability analysis is disabled.");
        } else {
            genaiClient = Client.builder().apiKey(apiKey).build();
            geminiEnabled = true;
            log.info("Gemini API key configured. Gemini-based vulnerability analysis is enabled.");
        }
    }

    public List<String> analyzeVulnerability(String vulnerabilityText) throws InterruptedException {
        if (!geminiEnabled || genaiClient == null) {
            // no noisy logs per call
            return Collections.emptyList();
        }

        String systemPrompt = "You are a software developer tasked with analyzing a vulnerability report.";
        String userPrompt = String.format("""
            You have been given a report with detected vulnerabilities within your code.
            You need to review it and plan how to fix them and in which order.
            For each given CVE, provide a list of constraints that must be met for the vulnerability to be exploitable in the code (e.g., usage of function X, etc.).
            Take all information that you have into account.
            The answer should be easily processable by the automation mechanism so that it can be directly inserted into the database.
            Return only a list of constraints - each constraint should be in one line of text
            The vulnerability text to review is:
            %s
            """, vulnerabilityText);

        Content content = Content.fromParts(
                Part.fromText(systemPrompt),
                Part.fromText(userPrompt)
        );

        GenerateContentConfig config = GenerateContentConfig.builder()
                .temperature(0.0f)
                .tools(List.of(Tool.builder()
                        .googleSearch(GoogleSearch.builder().build())
                        .build()))
                .build();

        // wait 10s so that we are not exceeding API rate limit
        //sleep(10_000);

        try {
            GenerateContentResponse response = genaiClient.models.generateContent(
                    "gemini-2.5-flash",
                    content,
                    config
            );

            String text = response.text();
            log.debug("AI responded with following constraints \n\n{}\n", text);

            return text == null ? Collections.emptyList()
                    : Arrays.stream(text.split("\\R"))
                    .map(String::trim)
                    .filter(line -> !line.isEmpty())
                    .toList();
        } catch (Exception e) {
            log.error("Gemini call failed: {}", e.getMessage(), e);
            return Collections.emptyList();
        }
    }

    /**
     * Optional: call this from an admin action if you allow toggling the key at runtime.
     */
    public synchronized void refreshConfiguration() {
        init();
    }
}
